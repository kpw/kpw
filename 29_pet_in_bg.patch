diff --git a/src/game/BattleGround.cpp b/src/game/BattleGround.cpp
index dd199e2..c26c6d4 100644
--- a/src/game/BattleGround.cpp
+++ b/src/game/BattleGround.cpp
@@ -182,6 +182,23 @@ void BattleGround::Update(time_t diff)
             if(!plr)
                 continue;
             plr->ResurrectPlayer(1.0f);
+
+            //restore player's pet
+            if(plr->GetLastPetNumber() && plr->isAlive())
+            {
+                Pet* NewPet = new Pet();
+
+				if(!NewPet->LoadPetFromDB(plr, 0, plr->GetLastPetNumber(), true))
+                    delete NewPet;
+				//restore pet's Health and Mana
+				else
+				{	
+					NewPet->SetHealth(NewPet->GetMaxHealth());
+					NewPet->SetPower(POWER_MANA,NewPet->GetMaxPower(POWER_MANA));
+                    NewPet->SetPower(POWER_HAPPINESS ,NewPet->GetMaxPower(POWER_HAPPINESS));
+				}
+            }
+
             plr->CastSpell(plr, SPELL_SPIRIT_HEAL_MANA, true);
             ObjectAccessor::Instance().ConvertCorpseForPlayer(*itr);
         }
diff --git a/src/game/Pet.cpp b/src/game/Pet.cpp
index caa1297..449026c 100644
--- a/src/game/Pet.cpp
+++ b/src/game/Pet.cpp
@@ -366,6 +366,10 @@ bool Pet::LoadPetFromDB( Unit* owner, uint32 petentry, uint32 petnumber, bool cu
         }
     }
 
+	//set last used pet number (for use in BG's)
+    if(owner->GetTypeId() == TYPEID_PLAYER && isControlled() && !isTemporarySummoned() && (getPetType() == SUMMON_PET || getPetType() == HUNTER_PET))
+		((Player*)owner)->SetLastPetNumber(pet_number);
+
     return true;
 }
 
diff --git a/src/game/Player.cpp b/src/game/Player.cpp
index 25b35a9..b186b9e 100644
--- a/src/game/Player.cpp
+++ b/src/game/Player.cpp
@@ -366,6 +366,8 @@ Player::Player (WorldSession *session): Unit()
     //when dying/logging out
     m_oldpetspell = 0;
 
+    m_lastpetnumber = 0;
+
     ////////////////////Rest System/////////////////////
     time_inn_enter=0;
     inn_pos_mapid=0;
@@ -15496,7 +15498,7 @@ void Player::RemovePet(Pet* pet, PetSaveMode mode, bool returnreagent)
     if(!pet)
         pet = GetPet();
 
-    if(returnreagent && (pet || m_temporaryUnsummonedPetNumber))
+    if(returnreagent && (pet || m_temporaryUnsummonedPetNumber) && !InBattleGround())
     {
         //returning of reagents only for players, so best done here
         uint32 spellId = pet ? pet->GetUInt32Value(UNIT_CREATED_BY_SPELL) : m_oldpetspell;
diff --git a/src/game/Player.h b/src/game/Player.h
index aaaaac6..ead87d7 100644
--- a/src/game/Player.h
+++ b/src/game/Player.h
@@ -1980,6 +1980,10 @@ class MANGOS_DLL_SPEC Player : public Unit
         uint32 GetOldPetSpell() const { return m_oldpetspell; }
         void SetOldPetSpell(uint32 petspell) { m_oldpetspell = petspell; }
 
+		// last used pet number (for BG's)
+        uint32 GetLastPetNumber() const { return m_lastpetnumber; }
+        void SetLastPetNumber(uint32 petnumber) { m_lastpetnumber = petnumber; }
+
         /*********************************************************/
         /***                 INSTANCE SYSTEM                   ***/
         /*********************************************************/
@@ -2241,9 +2245,12 @@ class MANGOS_DLL_SPEC Player : public Unit
         uint32 m_temporaryUnsummonedPetNumber;
         uint32 m_oldpetspell;
 
-        uint64 m_miniPet;
+		// last used pet number (for BG's)
+		uint32 m_lastpetnumber;
         GuardianPetList m_guardianPets;
 
+		uint64 m_miniPet;
+
         // Player summoning
         time_t m_summon_expire;
         uint32 m_summon_mapid;
